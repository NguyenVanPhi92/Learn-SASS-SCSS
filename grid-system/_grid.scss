@use 'sass:math';
// Breakpoint, dimension, container, row, column, v.v
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px
);

$grid-columns: 12;
$grid-gutter-width: 30px;
%gutter-padding {
  padding-left: $grid-gutter-width * 0.5;
  padding-right: $grid-gutter-width * 0.5;
}

.container-fluid {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  @extend %gutter-padding;
}

.container {
  @extend .container-fluid;
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -$grid-gutter-width * 0.5;
  margin-right: -$grid-gutter-width * 0.5;

  &[class*='row-cols-'] > *,
  [class*='col-'] {
    flex: 0 0 auto;
    @extend %gutter-padding;
  }
}

.col {
  flex: 1 0;
  @extend %gutter-padding;
}

@mixin make-media-query($demension, $by-pass: false) {
  @if $by-pass {
    @content;
  } @else {
    @media (min-width: $demension) {
      @content;
    }
  }
}

// row-cols-*, offset-*, g-*, gx-*, gy-*
@mixin make-row-columns($infix) {
  @for $i from 1 through $grid-columns * 0.5 {
    .row-cols#{$infix}-#{$i} > * {
      width: math.div(100%, $i);
    }
  }
}
@mixin make-columns($infix) {
  @for $i from 1 through $grid-columns {
    .col#{$infix}-#{$i} {
      width: math.div(100%, $grid-columns) * $i;
    }
  }
}
@mixin make-offsets($infix) {
  @for $i from 1 to $grid-columns {
    .offset#{$infix}-#{$i} {
      margin-left: if(1 > 0, math.div(100%, $grid-columns) * $i, 0);
    }
  }
}

@each $breakpoint, $demension in $grid-breakpoints {
  // su dung ham map-get()
  $max-width: map-get(
    $map: $container-max-widths,
    $key: $breakpoint
  );
  $infix: if($breakponit == xs, '', '-#{$breakpoint}'); // loai bo 'xs'

  @include make-media-query($demension) {
    .container {
      width: $max-width;
    }

    @include make-row-columns($infix);
    @include make-columns($infix);
    @include make-offsets($infix);
  }
}
